# Modern Python project configuration for Tug backend
# This file centralizes tool configuration for better maintainability

[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tug-backend"
version = "1.0.0"
description = "Tug application backend API"
authors = [
    {name = "Tug Development Team", email = "dev@tug-app.com"}
]
dependencies = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "motor>=3.6.0",
    "pymongo>=4.10.0,<5.0.0",
    "pydantic>=2.5.3",
    "pydantic-settings>=2.1.0",
    "firebase-admin>=6.4.0",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    "beanie>=1.26.0",
]
requires-python = ">=3.11"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.11.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "faker>=19.6.2",
    "factory-boy>=3.3.0",
]
security = [
    "bandit[toml]>=1.7.5",
    "safety>=3.0.0",
    "semgrep>=1.45.0",
]
quality = [
    "black>=23.9.0",
    "isort>=5.12.0",
    "pylint>=3.0.0",
    "mypy>=1.5.0",
]

# Tool configurations
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=60",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/conftest.py",
    "*/test_*.py",
    "*/*_test.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.black]
line-length = 88
target-version = ['py311']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]
known_third_party = ["fastapi", "pydantic", "motor", "beanie", "firebase_admin"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
skip = ["migrations"]

[tool.pylint.master]
jobs = 0
load-plugins = ["pylint.extensions.docparams", "pylint.extensions.docstyle"]
extension-pkg-whitelist = ["pydantic", "motor"]

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name (for short variable names)
    "R0903",  # too-few-public-methods (common in Pydantic models)
    "R0913",  # too-many-arguments
    "W0613",  # unused-argument (common in FastAPI dependencies)
    "R0801",  # duplicate-code
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 6
max-branches = 15
max-statements = 50
max-parents = 7
max-attributes = 15
max-public-methods = 25
max-bool-expr = 5

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

# Specific module configurations
[[tool.mypy.overrides]]
module = [
    "motor.*",
    "beanie.*",
    "firebase_admin.*",
    "jose.*",
]
ignore_missing_imports = true

[tool.bandit]
targets = ["app"]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]  # Skip assert statements and shell usage in specific contexts
severity = "medium"
confidence = "medium"

[tool.bandit.assert_used]
# Allow assert statements in specific files
skips = ["**/test_*.py", "**/*_test.py"]

[tool.bandit.hardcoded_password_string]
# Define patterns for hardcoded passwords
word_list = ["password", "pass", "passwd", "pwd", "token", "secret", "key", "api_key"]