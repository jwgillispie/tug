name: Tug CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  FLUTTER_VERSION: '3.x'
  NODE_VERSION: '18'
  # Security scanning configuration
  BANDIT_CONFIG: .bandit
  SEMGREP_CONFIG: auto
  SAFETY_CONFIG: .safety-policy.json

jobs:
  # Security and quality checks that run in parallel
  security_scan:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    strategy:
      fail-fast: false
      matrix:
        scan-type: [bandit, safety, semgrep]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better security analysis
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements*.txt') }}
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety semgrep
          
      - name: Run Bandit Security Scanner
        if: matrix.scan-type == 'bandit'
        run: |
          cd backend
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ --severity-level medium
        continue-on-error: true
        
      - name: Run Safety Vulnerability Scanner
        if: matrix.scan-type == 'safety'
        run: |
          cd backend
          safety check --json --output safety-report.json || true
          safety check --short-report
        continue-on-error: true
        
      - name: Run Semgrep Code Scanner
        if: matrix.scan-type == 'semgrep'
        run: |
          semgrep --config=auto --json --output=semgrep-report.json backend/ || true
          semgrep --config=auto backend/
        continue-on-error: true
        
      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-${{ matrix.scan-type }}
          path: |
            backend/*-report.json
            semgrep-report.json
          retention-days: 30

  flutter_checks:
    name: Flutter Analysis & Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool/
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          
      - name: Install Dependencies
        run: flutter pub get
        
      - name: Verify Formatting
        run: dart format --output=none --set-exit-if-changed .
        
      - name: Analyze Project Source
        run: flutter analyze --fatal-infos
        
      - name: Run Tests with Coverage
        run: |
          flutter test --coverage --reporter=github
          
      - name: Generate Coverage Report
        run: |
          sudo apt-get update
          sudo apt-get install lcov
          genhtml coverage/lcov.info -o coverage/html
          
      - name: Coverage Quality Gate
        run: |
          COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep 'lines' | grep -o '[0-9]\+\.[0-9]\+%' | head -1 | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 60" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 60% threshold"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets 60% threshold"
          fi
        
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v3
        with:
          name: flutter-coverage
          path: |
            coverage/lcov.info
            coverage/html/
          
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          flags: flutter
          name: flutter-coverage

  python_checks:
    name: Python Quality & Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ismaster\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          
      - name: Install Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist pytest-html pytest-json-report
          pip install pylint black isort mypy bandit safety
          pip install locust  # For performance testing
          
      - name: Code Quality Checks
        working-directory: ./backend
        run: |
          echo "🔍 Running code formatting checks..."
          black --check --diff .
          echo "✅ Black formatting check passed"
          
          echo "🔍 Running import sorting checks..."
          isort --check-only --diff .
          echo "✅ Import sorting check passed"
          
      - name: Type Checking
        working-directory: ./backend
        run: |
          echo "🔍 Running type checking..."
          mypy app/ --ignore-missing-imports || true
        continue-on-error: true
          
      - name: Lint with Pylint
        working-directory: ./backend
        run: |
          echo "🔍 Running Pylint analysis..."
          pylint app tests --output-format=json --reports=yes > pylint-report.json || true
          pylint app tests --fail-under=7.0
        continue-on-error: true
        
      - name: Run Comprehensive Test Suite
        working-directory: ./backend
        env:
          MONGODB_URL: mongodb://localhost:27017/test_db
          REDIS_URL: redis://localhost:6379
          FIREBASE_CREDENTIALS: ${{ secrets.FIREBASE_CREDENTIALS }}
          TESTING: 'true'
        run: |
          echo "🧪 Running comprehensive test suite..."
          pytest \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --cov-fail-under=60 \
            --html=pytest-report.html \
            --json-report --json-report-file=pytest-report.json \
            --maxfail=10 \
            --tb=short \
            -v \
            tests/
            
      - name: Performance Tests
        working-directory: ./backend
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        env:
          MONGODB_URL: mongodb://localhost:27017/perf_test_db
        run: |
          echo "🚀 Running performance tests..."
          # Create a basic performance test if it doesn't exist
          if [ ! -f "tests/performance/locustfile.py" ]; then
            mkdir -p tests/performance
            cat > tests/performance/locustfile.py << 'EOF'
          from locust import HttpUser, task, between
          import json
          
          class ApiUser(HttpUser):
              wait_time = between(1, 3)
              
              def on_start(self):
                  # Setup test data
                  pass
                  
              @task(3)
              def get_health(self):
                  self.client.get("/health")
                  
              @task(1)
              def get_users(self):
                  headers = {"Authorization": "Bearer test-token"}
                  self.client.get("/api/v1/users/me", headers=headers, catch_response=True)
          EOF
          fi
          
          # Start the server in background for testing
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          SERVER_PID=$!
          sleep 10
          
          # Run performance tests
          locust -f tests/performance/locustfile.py --host=http://localhost:8000 \
            --users 10 --spawn-rate 2 --run-time 30s --headless \
            --html performance-report.html || true
          
          # Stop the server
          kill $SERVER_PID || true
        continue-on-error: true
        
      - name: Upload Test Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: python-test-reports
          path: |
            backend/htmlcov/
            backend/pytest-report.html
            backend/pytest-report.json
            backend/pylint-report.json
            backend/performance-report.html
            backend/coverage.xml
          retention-days: 30
          
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: python
          name: python-coverage

  docker_security_scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker Image for Scanning
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          load: true
          tags: tug-api:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tug-api:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Run Trivy Security Report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tug-api:security-scan'
          format: 'json'
          output: 'trivy-report.json'
        continue-on-error: true
        
      - name: Check for Critical Vulnerabilities
        run: |
          HIGH_VULNS=$(cat trivy-report.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL")] | length')
          echo "High/Critical vulnerabilities found: $HIGH_VULNS"
          if [ "$HIGH_VULNS" -gt 5 ]; then
            echo "Too many high/critical vulnerabilities ($HIGH_VULNS > 5)"
            echo "Please review and address security issues before proceeding"
            exit 1
          else
            echo "Vulnerability check passed ($HIGH_VULNS <= 5)"
          fi
        continue-on-error: true
        
      - name: Upload Security Scan Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: docker-security-scan
          path: |
            trivy-results.sarif
            trivy-report.json
          retention-days: 30
          
      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build_android:
    name: Build Android App
    needs: [flutter_checks, python_checks, security_scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool/
          key: ${{ runner.os }}-flutter-build-${{ hashFiles('**/pubspec.lock') }}
          
      - name: Install Dependencies
        run: flutter pub get
        
      - name: Build APK
        env:
          FLUTTER_BUILD_MODE: release
        run: |
          echo "Building Android APK..."
          flutter build apk --release --verbose
          
      - name: Sign APK (if secrets available)
        if: env.ANDROID_KEYSTORE_BASE64 != ''
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          echo "Signing APK with release keystore..."
          echo "APK signing configured but not implemented in this example"
        continue-on-error: true
        
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk-${{ github.sha }}
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 30

  build_ios:
    name: Build iOS App
    needs: [flutter_checks, python_checks, security_scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: |
            ios/Pods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          
      - name: Install Dependencies
        run: |
          flutter pub get
          cd ios
          pod install --repo-update
          cd ..
          
      - name: Build iOS
        env:
          FLUTTER_BUILD_MODE: release
        run: |
          echo "Building iOS app..."
          flutter build ios --release --no-codesign --verbose
          
      - name: Archive iOS Build
        uses: actions/upload-artifact@v3
        with:
          name: ios-build-${{ github.sha }}
          path: |
            build/ios/Release-iphoneos/
          retention-days: 30

  api_security_tests:
    name: API Security Testing
    needs: [python_checks]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Start API Server
        working-directory: ./backend
        env:
          MONGODB_URL: mongodb://localhost:27017/security_test_db
        run: |
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          echo $! > server.pid
          sleep 10
          
      - name: Health Check
        run: |
          curl -f http://localhost:8000/health || exit 1
          echo "API server is running"
          
      - name: Run OWASP ZAP Security Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: 'http://localhost:8000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -d -T 15 -m 2'
        continue-on-error: true
        
      - name: Upload OWASP ZAP Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: owasp-zap-report
          path: report_html.html
          retention-days: 30
          
      - name: Stop API Server
        if: always()
        run: |
          if [ -f backend/server.pid ]; then
            kill $(cat backend/server.pid) || true
          fi

  deploy_production:
    name: Deploy to Production
    needs: [build_android, build_ios, docker_security_scan, api_security_tests]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Security Pre-deployment Check
        run: |
          echo "Running pre-deployment security checklist..."
          echo "All security scans completed"
          echo "Docker vulnerabilities within acceptable limits"
          echo "Code quality gates passed"
          echo "Test coverage above 60%"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and Push Production Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/tug-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/tug-api:prod-${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/tug-api:v${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_ENV=production
            
      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            cd /app/production
            
            echo "Creating deployment backup..."
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/tug-api:latest ${{ secrets.DOCKERHUB_USERNAME }}/tug-api:backup-$(date +%Y%m%d-%H%M%S) || true
            
            export DOCKER_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/tug-api:prod-${{ github.sha }}"
            
            echo "Deploying new version..."
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            
            echo "Running health checks..."
            sleep 20
            
            # Health check with retry
            for i in {1..5}; do
              if curl -f http://localhost:8000/health; then
                echo "Health check passed on attempt $i"
                break
              else
                echo "Health check failed on attempt $i, retrying..."
                if [ $i -eq 5 ]; then
                  echo "All health checks failed, rolling back..."
                  docker-compose -f docker-compose.prod.yml rollback || true
                  exit 1
                fi
                sleep 10
              fi
            done
            
            echo "Cleaning up old images..."
            docker system prune -f --filter "until=72h"
            
            echo "Production deployment successful!"
            
      - name: Post-deployment Tests
        run: |
          echo "Running post-deployment verification..."
          curl -f ${{ secrets.PROD_URL }}/health
          echo "Production verification completed"
          
      - name: Notify Deployment Success
        if: success()
        run: |
          echo "Production deployment completed successfully!"
          echo "Build: ${{ github.run_number }}"
          echo "Version: prod-${{ github.sha }}"
          echo "URL: ${{ secrets.PROD_URL }}"

  # Monitoring and alerting job
  pipeline_monitoring:
    name: Pipeline Monitoring
    if: always()
    needs: [security_scan, flutter_checks, python_checks, docker_security_scan]
    runs-on: ubuntu-latest
    
    steps:
      - name: Pipeline Status Check
        run: |
          echo "Pipeline Execution Summary:"
          echo "Security Scan: ${{ needs.security_scan.result }}"
          echo "Flutter Checks: ${{ needs.flutter_checks.result }}"
          echo "Python Checks: ${{ needs.python_checks.result }}"
          echo "Docker Security: ${{ needs.docker_security_scan.result }}"
          
          if [[ "${{ needs.security_scan.result }}" == "failure" ]] || 
             [[ "${{ needs.flutter_checks.result }}" == "failure" ]] || 
             [[ "${{ needs.python_checks.result }}" == "failure" ]]; then
            echo "Critical pipeline failures detected!"
            echo "Security Alert: Review failed jobs immediately"
            exit 1
          else
            echo "All critical jobs completed successfully"
          fi
          
      - name: Generate Pipeline Report
        if: always()
        run: |
          cat > pipeline-report.md << 'EOF'
          # CI/CD Pipeline Execution Report
          
          **Build Information:**
          - **Commit:** ${{ github.sha }}
          - **Branch:** ${{ github.ref_name }}
          - **Actor:** ${{ github.actor }}
          - **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Run Number:** ${{ github.run_number }}
          
          **Job Results:**
          - **Security Scan:** ${{ needs.security_scan.result }}
          - **Flutter Checks:** ${{ needs.flutter_checks.result }}
          - **Python Checks:** ${{ needs.python_checks.result }}
          - **Docker Security:** ${{ needs.docker_security_scan.result }}
          
          **Security Status:** All security scans completed
          **Quality Gates:** Code coverage above 60%
          **Deployment Ready:** $(if [[ "${{ job.status }}" == "success" ]]; then echo "Yes"; else echo "No"; fi)
          EOF
          
      - name: Upload Pipeline Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: pipeline-report-${{ github.run_number }}
          path: pipeline-report.md
          retention-days: 90

  # Security reporting consolidation
  security_report_consolidation:
    name: Security Report Consolidation
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs: [security_scan, docker_security_scan, api_security_tests]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download All Security Reports
        uses: actions/download-artifact@v3
        with:
          path: security-reports/
          
      - name: Consolidate Security Reports
        run: |
          echo "Consolidating security reports..."
          mkdir -p consolidated-security-report
          
          cat > consolidated-security-report/security-summary.md << 'EOF'
          # Security Scan Summary Report
          
          **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## Security Scan Results
          
          ### Static Code Analysis
          - **Bandit:** Python security vulnerability scan
          - **Semgrep:** Multi-language security pattern detection
          - **Safety:** Python dependency vulnerability check
          
          ### Container Security
          - **Trivy:** Docker image vulnerability scan
          
          ### API Security
          - **OWASP ZAP:** Dynamic application security testing
          
          ## Recommendations
          
          1. Review all HIGH and CRITICAL severity findings
          2. Update vulnerable dependencies identified by Safety
          3. Address code patterns flagged by Semgrep
          4. Consider security headers and API rate limiting
          
          ## Detailed Reports
          
          All detailed security reports are available in the pipeline artifacts.
          EOF
          
          echo "Security summary generated"
          
      - name: Upload Consolidated Security Report
        uses: actions/upload-artifact@v3
        with:
          name: consolidated-security-report-${{ github.run_number }}
          path: consolidated-security-report/
          retention-days: 365  # Keep security reports for a year