name: tug CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  flutter_checks:
    name: Flutter Analysis & Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'
          
      - name: Install Dependencies
        run: flutter pub get
        
      - name: Verify Formatting
        run: dart format --output=none --set-exit-if-changed .
        
      - name: Analyze Project Source
        run: flutter analyze
        
      - name: Run Tests
        run: flutter test --coverage
        
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info

  python_checks:
    name: Python Linting & Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
          
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pylint black isort
          
      - name: Check Code Formatting
        working-directory: ./backend
        run: |
          black --check .
          isort --check-only .
          
      - name: Lint with Pylint
        working-directory: ./backend
        run: pylint app tests
        
      - name: Run Tests with Coverage
        working-directory: ./backend
        env:
          MONGODB_URL: mongodb://localhost:27017/test_db
          FIREBASE_CREDENTIALS: ${{ secrets.FIREBASE_CREDENTIALS }}
        run: pytest --cov=app --cov-report=xml
        
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml

  build_android:
    name: Build Android App
    needs: [flutter_checks, python_checks]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'
          
      - name: Install Dependencies
        run: flutter pub get
        
      - name: Build APK
        run: flutter build apk --release
        
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

  build_ios:
    name: Build iOS App
    needs: [flutter_checks, python_checks]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'
          
      - name: Install Dependencies
        run: |
          flutter pub get
          cd ios && pod install && cd ..
          
      - name: Build iOS
        run: flutter build ios --release --no-codesign

  deploy_backend:
    name: Deploy Backend
    needs: [flutter_checks, python_checks]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/tug-api:latest
          
      - name: Deploy to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /app/backend
            docker-compose pull
            docker-compose up -d